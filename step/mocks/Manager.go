// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	destination "github.com/bitrise-io/go-xcode/v2/destination"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SimulatorManager is an autogenerated mock type for the Manager type
type SimulatorManager struct {
	mock.Mock
}

// Boot provides a mock function with given fields: device
func (_m *SimulatorManager) Boot(device destination.Device) error {
	ret := _m.Called(device)

	var r0 error
	if rf, ok := ret.Get(0).(func(destination.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectDiagnostics provides a mock function with given fields:
func (_m *SimulatorManager) CollectDiagnostics() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVerboseLog provides a mock function with given fields: id
func (_m *SimulatorManager) EnableVerboseLog(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Erase provides a mock function with given fields: id
func (_m *SimulatorManager) Erase(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LaunchWithGUI provides a mock function with given fields: simulatorID
func (_m *SimulatorManager) LaunchWithGUI(simulatorID string) error {
	ret := _m.Called(simulatorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(simulatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetLaunchServices provides a mock function with given fields:
func (_m *SimulatorManager) ResetLaunchServices() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: id
func (_m *SimulatorManager) Shutdown(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForBootFinished provides a mock function with given fields: id, timeout
func (_m *SimulatorManager) WaitForBootFinished(id string, timeout time.Duration) error {
	ret := _m.Called(id, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(id, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSimulatorManager creates a new instance of SimulatorManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSimulatorManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SimulatorManager {
	mock := &SimulatorManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
